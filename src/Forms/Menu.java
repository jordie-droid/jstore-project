/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import ConnectDataBase.ConnectDataBase;
import Controleur.ControleurTailleMaximale;
import Controleur.SubJTable;
import java.awt.Color;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.view.JRViewer;
//select t_entrer.DateEntrer,t_entrer.QteEntrer,t_article.design,t_entrer.PrixUnitaire from t_article,t_entrer where t_article.refart=t_entrer.refart
//Produit le plus rentable : select max(greatest(sum(QteSortie * PrixUnitaire),sum(QteSortie * PrixUnitaire))) from t_sortie group by refart

/**
 *
 * @author Pascal_De_Marie
 */
public class Menu extends javax.swing.JFrame {

    private Statement st;
    ResultSet rs;
    public String ip;
    //ConnectDataBase cb=new ConnectDataBase();
    private int yes;
    private int no = 0;
    private Connection con;
    double Tent = 0.0;
    double Tsor = 0.0;
    double Resu;
    private Timer timer;
    DefaultTableModel dtm;

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        //this.getContentPane().setBackground(Color.white);
        //imagePanel1.setImage(new ImageIcon(this.getClass().getResource("/Icons/B1.png")).getImage());
        //.setImage(new ImageIcon(this.getClass().getResource("/Icons/index1.jpg")).getImage());
        //imagePanel2.setImage(new ImageIcon(this.getClass().getResource("/Icons/index1.jpg")).getImage());
        //imagePanel4.setImage(new ImageIcon(this.getClass().getResource("/Icons/index1.jpg")).getImage());
        this.setIconImage(new ImageIcon(getClass().getResource("/Icons/viewoptions.png")).getImage());
        Titre();
        ControleurTailleMaximale c = new ControleurTailleMaximale();
        c.TailleMaximale();/*
         * TotalEntrer(); TotalSortie(); StockAlert(); LabTent.setText("Total
         * des entrées : " + getTotalEntree()); LabTsor.setText("Total des
         * sorties : " + getTotalSortie()); LabRes.setText("Résultat : " +
         * getResultat());
         */
        //actualisation();
        new Thread() {

            @Override
            public void run() {
                try {
                    for (;;) {
                        //EnStock.clear();
                        //VenJour.clear();
                        //ArtSAler.clear();
                        //Encourstock();
                        //venteJournalier();
                        //produitLePlusRentable();
                        produitLePlusRentableOk();
                        //produitRentable();
                        TotalEntrer();
                        TotalSortie();
                        //StockAlert();
                        LabTent.setText("Total des entrées : " + getTotalEntree());
                        LabTsor.setText("Total des sorties : " + getTotalSortie());
                        LabRes.setText("Résultat : " + getResultat());
                        sleep(100);
                    }
                } catch (Exception ex) {
                }
            }
        }.start();
        jButton1.setVisible(false);
        this.setSize(c.xsize, c.ysize);
        dateheure();
        //JOptionPane.showMessageDialog(null, ip);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        labus = new javax.swing.JLabel();
        LabDate = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        labQteEnt = new javax.swing.JLabel();
        labQteSort = new javax.swing.JLabel();
        labDes = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        LabTsor = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        LabRes = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        LabTent = new javax.swing.JLabel();
        imagePanel3 = new picturepanel.ImagePanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        setForeground(new java.awt.Color(0, 102, 153));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        labus.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labus.setForeground(new java.awt.Color(0, 102, 204));
        labus.setText("Utilisateur actuel :");

        LabDate.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        LabDate.setForeground(new java.awt.Color(0, 153, 51));
        LabDate.setText("Heure et date :");

        jLabel15.setBackground(new java.awt.Color(0, 102, 153));
        jLabel15.setToolTipText("Le résultat de l'exerce est égale à zéro. Vos ventes couvrent vos achats mais vous avez rien gagnez.");
        jLabel15.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel15.setOpaque(true);

        jLabel14.setBackground(new java.awt.Color(204, 0, 0));
        jLabel14.setToolTipText("Le résultat de votre exercice est inférieur à zéro. Vos achats est supérieur à vos ventes.");
        jLabel14.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel14.setOpaque(true);

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Zéro");

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Bénéfice");

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Perte");

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel21.setBackground(new java.awt.Color(0, 153, 204));
        jLabel21.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/downarrow1.png"))); // NOI18N
        jLabel21.setText("Produit le plus rentable");
        jLabel21.setOpaque(true);

        labQteEnt.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labQteEnt.setText("Quantité entrée :");

        labQteSort.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labQteSort.setText("Quantité Sortie :");

        labDes.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labDes.setText("Désignation :");

        jLabel12.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel12.setText("Rentabilité :");

        jLabel11.setBackground(new java.awt.Color(0, 153, 51));
        jLabel11.setToolTipText("Le résultat de l'exercice est supérieur à zéro. Vos ventes couvrent vos achats et vous avez réalisé un bénéfice.");
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel11.setOpaque(true);

        LabTsor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        LabTsor.setText("Total des sorties :");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("_________________");

        LabRes.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        LabRes.setText("Résultat :");

        jLabel7.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel7.setText("_________________");

        jButton1.setBackground(new java.awt.Color(0, 153, 204));
        jButton1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/table.gif"))); // NOI18N
        jButton1.setText("Explorer les produits par ordre de rentabilité");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 153, 204));
        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/downarrow1.png"))); // NOI18N
        jLabel3.setText("Extrait comptable");
        jLabel3.setOpaque(true);

        LabTent.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        LabTent.setText("Total des entrées :");

        javax.swing.GroupLayout imagePanel3Layout = new javax.swing.GroupLayout(imagePanel3);
        imagePanel3.setLayout(imagePanel3Layout);
        imagePanel3Layout.setHorizontalGroup(
            imagePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        imagePanel3Layout.setVerticalGroup(
            imagePanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/File.png"))); // NOI18N
        jMenu1.setMnemonic('F');
        jMenu1.setText("Fichier");
        jMenu1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem1.setText("Mise à jour Type d'article");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem2.setText("Mise à jour Article");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem4.setText("Mise à jour Client");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem6.setText("Mise à jour Fournisseur");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/views.png"))); // NOI18N
        jMenu2.setMnemonic('V');
        jMenu2.setText("Consultation");
        jMenu2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem5.setText("Informations des fichiers");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenu8.setText("Informations d'exploitation");
        jMenu8.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem10.setText("Entrée");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem11.setText("Stock");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem12.setText("Sortie");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem12);

        jMenu2.add(jMenu8);

        jMenuBar1.add(jMenu2);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/viewoptions.png"))); // NOI18N
        jMenu3.setMnemonic('E');
        jMenu3.setText("Exploitation");
        jMenu3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem7.setText("Entrée");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem9.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem9.setText("Sortie");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuBar1.add(jMenu3);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Bar Chart24.png"))); // NOI18N
        jMenu4.setMnemonic('R');
        jMenu4.setText("Rapport");
        jMenu4.setEnabled(false);
        jMenu4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem21.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem21.setText("Liste d'articles");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem21);

        jMenuItem29.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem29.setText("Entrée");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem29);

        jMenu13.setText("Sortie");
        jMenu13.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem20.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem20.setText("Tous les articles");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem20);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem15.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem15.setText("Par groupe de clients");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem15);

        jMenuItem26.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem26.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem26.setText("Par groupe de produits");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem26);

        jMenu4.add(jMenu13);

        jMenuItem27.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem27.setText("Fiche de stock");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem27);

        jMenuBar1.add(jMenu4);

        jMenu14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/b_tblops.png"))); // NOI18N
        jMenu14.setText("Accessoire");
        jMenu14.setEnabled(false);
        jMenu14.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem24.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem24.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem24.setText("Calculatrice");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem24);

        jMenuItem30.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem30.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem30.setText("Bloc note");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem30);

        jMenuBar1.add(jMenu14);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Parame.png"))); // NOI18N
        jMenu5.setMnemonic('P');
        jMenu5.setText("Paramètre");
        jMenu5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenu9.setText("Gestion d'uitlisateur");
        jMenu9.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem14.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem14.setText("Administrateur");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem14);

        jMenuItem8.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem8.setText("Utilisateur");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem8);

        jMenu5.add(jMenu9);

        jMenu11.setText("Historique d'utilisation");
        jMenu11.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem3.setText("User log");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem3);

        jMenu5.add(jMenu11);

        jMenu10.setText("JStore");
        jMenu10.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        jMenuItem18.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem18.setText("Ton JStore");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem18);

        jMenuItem19.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem19.setText("Sauvegarder les données");
        jMenuItem19.setEnabled(false);
        jMenu10.add(jMenuItem19);

        jMenu5.add(jMenu10);

        jMenuItem16.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem16.setText("Configuration logiciel");
        jMenuItem16.setEnabled(false);
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem16);

        jMenuItem13.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuItem13.setText("Apropos du logiciel");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem13);

        jMenuBar1.add(jMenu5);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/help.gif"))); // NOI18N
        jMenu6.setMnemonic('A');
        jMenu6.setText("Aide");
        jMenu6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(labus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LabDate)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labDes)
                                .addComponent(labQteEnt)
                                .addComponent(labQteSort)
                                .addComponent(jLabel12)
                                .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSeparator2)
                                .addComponent(LabRes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LabTent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LabTsor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jLabel4))
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imagePanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator9)
                    .addComponent(imagePanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labDes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labQteEnt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labQteSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabTent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabTsor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabRes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labus)
                    .addComponent(LabDate)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        F_typart typart = new F_typart(new javax.swing.JFrame(), true);
        typart.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        F_Data data = new F_Data(new javax.swing.JFrame(), true);
        data.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        F_entree ent = new F_entree(new javax.swing.JFrame(), true);
        ent.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        F_sortie sort = new F_sortie(new javax.swing.JFrame(), true);
        sort.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        F_Article art = new F_Article(new javax.swing.JFrame(), true);
        art.show();// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        F_Client cli = new F_Client(new javax.swing.JFrame(), true);
        cli.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        F_Fourni four = new F_Fourni(new javax.swing.JFrame(), true);
        four.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        F_vstock vstock = new F_vstock(new javax.swing.JFrame(), true);
        vstock.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        F_ventree ventr = new F_ventree(new javax.swing.JFrame(), true);
        ventr.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Encourstock();
        venteJournalier();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        F_vsortie vsortie = new F_vsortie(new javax.swing.JFrame(), true);
        vsortie.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        F_user user = new F_user(new javax.swing.JFrame(), true);
        user.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (JOptionPane.showConfirmDialog(null, "Voulez vous quitter ce logiciel ?", "JStore : CONFIRMATION", JOptionPane.OK_CANCEL_OPTION) == yes) {
            JOptionPane.showMessageDialog(null, "Vous avez quitté avec sécurité.", "JStore : INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        } else {
            this.setDefaultCloseOperation(no);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        F_admin admin = new F_admin(new javax.swing.JFrame(), true);
        admin.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        F_ULog Ulog = new F_ULog(new javax.swing.JFrame(), true);
        Ulog.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        F_ListProd Lprod = new F_ListProd(new javax.swing.JFrame(), true);
        con = new ConnectDataBase().getConnetion();
        try {
            String report = "D:\\jkl\\Logiciel\\java\\jordie\\mes application java\\GsStandar\\src\\EtatSortie\\rapsortie.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(report);
            //Map parametre=new HashMap();
            //parametre.put("Para", T_refugie.getValueAt(T_refugie.getSelectedRow(), 0));
            //String Date1=JOptionPane.showInputDialog("Entrer La première date");
            //String Date2=JOptionPane.showInputDialog("Entrer La deuxième date");
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JRViewer viewer = new JRViewer(jp);
            viewer.setOpaque(true);
            viewer.setVisible(true);
            Lprod.jScrollPane1.add(viewer);
            Lprod.jScrollPane1.setViewportView(viewer);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "" + ex.toString());
        }
        Lprod.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        F_JStores Ulog = new F_JStores(new javax.swing.JFrame(), true);
        Ulog.show();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        F_ListProd opt = new F_ListProd(new javax.swing.JFrame(), true);
        con = new ConnectDataBase().getConnetion();
        try {
            String report = "D:\\jkl\\Logiciel\\java\\jordie\\mes application java\\JStore\\src\\EtatSortie\\ListeEntree.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(report);
            //Map parametre=new HashMap();
            //parametre.put("Para", T_refugie.getValueAt(T_refugie.getSelectedRow(), 0));
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JRViewer viewer = new JRViewer(jp);
            viewer.setOpaque(true);
            viewer.setVisible(true);
            opt.jScrollPane1.add(viewer);
            opt.jScrollPane1.setViewportView(viewer);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "" + ex.toString());
        }
        opt.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        Runtime runtime = Runtime.getRuntime();
        try {
            Process proc = runtime.exec("calc.exe");
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
        F_optRechEnt opt = new F_optRechEnt(new javax.swing.JFrame(), true);
        opt.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        Runtime runtime = Runtime.getRuntime();
        try {
            Process proc = runtime.exec("notepad.exe");
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        F_apropos apropos = new F_apropos(new javax.swing.JFrame(), true);
        apropos.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
        F_FicheStock F_fich = new F_FicheStock(new javax.swing.JFrame(), true);
        F_fich.setVisible(true);       // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String entete[] = {"Article", "Quantité entrée", "Quantité sortie", "Rentabilité"};
        dtm = new DefaultTableModel(null, entete);
        String req = "Select t_article.design,sum(t_entrer.QteEntrer)/count(*),sum(t_sortie.QteSortie),sum((t_sortie.PrixUnitaire * t_sortie.QteSortie))-sum(t_entrer.QteEntrer)/count(*)*(t_entrer.PrixUnitaire) from t_article,t_entrer,t_sortie where t_article.refart=t_entrer.refart and t_entrer.refart=t_sortie.refart group by t_article.refart order by sum((t_sortie.PrixUnitaire * t_sortie.QteSortie))-sum(t_entrer.QteEntrer)/count(*)*(t_entrer.PrixUnitaire) desc";
        try {
            Object row[] = new Object[4];
            st = new ConnectDataBase().getConnetion().createStatement();
            rs = st.executeQuery(req);
            while (rs.next()) {
                row[0] = rs.getObject(1);
                row[1] = rs.getObject(2);
                row[2] = rs.getObject(3);
                row[3] = rs.getObject(4);
                dtm.addRow(row);
            }
            JTable maTable = new JTable();
            maTable.setDefaultRenderer(Object.class, new SubJTable());
            maTable.setModel(dtm);
            JOptionPane.showMessageDialog(null, maTable, "Produit par ordre de rentabilité", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            System.out.print(ex.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        F_config config = new F_config(new javax.swing.JFrame(), true);
        config.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    public void Encourstock() {
        try {
            st = new ConnectDataBase().getConnetion().createStatement();
            String art = "Select t_article.design, t_stock.QteStock from t_article, t_stock where t_article.refart=t_stock.refart order by t_article.design";
            rs = st.executeQuery(art);
            Object row[] = new Object[2];
            while (rs.next()) {
//                EnStock.add(rs.getObject(1) + " : " + rs.getObject(2));
            }
        } catch (Exception ex) {
            System.out.print(ex);
        }
    }

    public void Titre() {
        try {
            st = new ConnectDataBase().getConnetion().createStatement();
            String art = "Select t_jstore.RaisSoc from t_jstore";
            rs = st.executeQuery(art);
            while (rs.next()) {
                this.setTitle(rs.getString(1));
            }
        } catch (Exception ex) {
            System.out.print(ex);
        }
    }

    public void venteJournalier() {
        double tj = 0.0;
        try {
            st = new ConnectDataBase().getConnetion().createStatement();
            String art = "Select t_article.design, sum(t_sortie.QteSortie*t_sortie.PrixUnitaire) from t_article, t_sortie where t_article.refart=t_sortie.refart and t_sortie.DateSortie='" + annee + "-" + (mois + 1) + "-" + jour + "' group by t_article.design";
            rs = st.executeQuery(art);
            while (rs.next()) {
//                VenJour.add(rs.getObject(1) + " : " + rs.getObject(2));
                tj += rs.getInt(2);
            }
//            LabTj.setText(null);
//            LabTj.setText("Total du jour=" + tj);
        } catch (Exception ex) {
            System.out.print(ex);
        }
    }

    public void TotalEntrer() {
        try {
            st = new ConnectDataBase().getConnetion().createStatement();
            String res = "Select sum(t_entrer.QteEntrer * t_entrer.PrixUnitaire) from t_entrer where t_entrer.DateEntrer >= '" + annee + "-01-01' and t_entrer.DateEntrer <= '" + madate + "'";
            rs = st.executeQuery(res);
            while (rs.next()) {
                Tent = rs.getDouble(1);
            }
        } catch (Exception ex) {
            System.out.print(ex.getMessage());
        }
    }

    public void TotalSortie() {
        try {
            st = new ConnectDataBase().getConnetion().createStatement();
            String res = "Select sum(t_sortie.QteSortie * t_sortie.PrixUnitaire) from t_sortie where t_sortie.DateSortie >= '" + annee + "-01-01' and t_sortie.DateSortie <= '" + madate + "'";
            rs = st.executeQuery(res);
            while (rs.next()) {
                Tsor = rs.getDouble(1);
            }
        } catch (Exception ex) {
            System.out.print(ex.getMessage());
        }
    }
    //System.out.println(" le plus grand = " + Math.max(5, 10));
//System.out.println(" le plus petit = " + Math.min(26, 14)); 

    public void StockAlert() {
        try {
            st = new ConnectDataBase().getConnetion().createStatement();
            String res = "Select t_article.design,t_stock.QteStock from t_article,t_stock where t_article.refart=t_stock.refart and t_stock.QteStock < 10";
            rs = st.executeQuery(res);
            String art;
            double Qte;
            while (rs.next()) {
                art = rs.getString(1);
                Qte = rs.getDouble(2);
//                ArtSAler.add(art + " : " + Qte);
            }
        } catch (Exception ex) {
            System.out.print(ex);
        }
    }

    public Double getTotalEntree() {
        return Tent;
    }

    public Double getTotalSortie() {
        return Tsor;
    }

    public Double getResultat() {
        Resu = Tsor - Tent;
        if (Resu == 0) {
            LabRes.setForeground(new Color(0, 102, 153));
        } else if (Resu < 0) {
            LabRes.setForeground(new Color(255, 51, 51));
        } else {
            LabRes.setForeground(new Color(0, 153, 51));
        }
        return Resu;
    }

    public void StatEntree() {
    }
    int mois;
    int annee;
    int jour;
    int seconde;
    int minute;
    int heure;
    String madate;

    public void dateheure() {
        Thread clock = new Thread() {

            @Override
            public void run() {
                for (;;) {
                    Calendar cal = new GregorianCalendar();
                    int mois = cal.get(Calendar.MONTH);
                    int annee = cal.get(Calendar.YEAR);
                    int jour = cal.get(Calendar.DAY_OF_MONTH);
                    int seconde = cal.get(Calendar.SECOND);
                    int minute = cal.get(Calendar.MINUTE);
                    int heure = cal.get(Calendar.HOUR_OF_DAY);
                    int jourse = cal.get(Calendar.DAY_OF_WEEK);
                    String month = "";
                    String day = "";
                    switch (jourse - 1) {
                        case 1:
                            day = "lun";
                            break;
                        case 2:
                            day = "mar";
                            break;
                        case 3:
                            day = "mer";
                            break;
                        case 4:
                            day = "jeu";
                            break;
                        case 5:
                            day = "ven";
                            break;
                        case 6:
                            day = "sam";
                            break;
                        default:
                            day = "dim";
                            break;
                    }

                    switch (mois + 1) {
                        case 1:
                            month = "jan";
                            break;
                        case 2:
                            month = "fév";
                            break;
                        case 3:
                            month = "mar";
                            break;
                        case 4:
                            month = "avr";
                            break;
                        case 5:
                            month = "mai";
                            break;
                        case 6:
                            month = "jui";
                            break;
                        case 7:
                            month = "jul";
                            break;
                        case 8:
                            month = "aôu";
                            break;
                        case 9:
                            month = "sep";
                            break;
                        case 10:
                            month = "oct";
                            break;
                        case 11:
                            month = "nov";
                            break;
                        case 12:
                            month = "déc";
                            break;
                    }
                    int mmois = mois + 1;
                    madate = annee + "/" + mmois + "/" + jour;
                    LabDate.setText(day + "." + jour + " " + month + ". " + annee + " " + " " + heure + ":" + minute + ":" + seconde);
                    try {
                        sleep(1000);
                    } catch (Exception e) {
                    }
                }
            }
        };
        clock.start();
    }

    public void actualisation() {
        new Thread() {

            @Override
            public void run() {
                for (int i = 0; i < 20; i++) {
                    try {
                        TotalEntrer();
                        TotalSortie();
                        StockAlert();
                        LabTent.setText("Total des entrées : " + getTotalEntree());
                        LabTsor.setText("Total des sorties : " + getTotalSortie());
                        LabRes.setText("Résultat : " + getResultat());
                        sleep(100);
                    } catch (Exception ex) {
                    }
                }
            }
        }.start();
    }

    /* 
            String enteteIdProd[] = {"ID"};
            String entete1[] = {"Article", "Quantité totale entrée", "Prix total entrée"};
            String entete2[] = {"Article", "Quantité totale sortie", "Prix total sortie"};
            DefaultTableModel dtmIdProd = new DefaultTableModel(null, enteteIdProd);
            DefaultTableModel dtm1 = new DefaultTableModel(null, entete1);
            DefaultTableModel dtm2 = new DefaultTableModel(null, entete2);
            Object rowIdProd[] = new Object[1];
            Object row1[] = new Object[3];
            Object row2[] = new Object[3];
            st = new ConnectDataBase().getConnetion().createStatement();
            rs = st.executeQuery(produitEntrer);
            while (rs.next()) {
                rowIdProd[0] = rs.getObject(1);
                dtmIdProd.addRow(rowIdProd);
            }
            for (int i = 0; i < dtmIdProd.getRowCount(); i++) {
                String reqProdEnt = "Select t_article.design,sum(t_entrer.QteEntrer),sum(t_entrer.QteEntrer * t_entrer.PrixUnitaire) from t_article,t_entrer where t_article.refart='" + dtmIdProd.getValueAt(i, 0) + "' and t_entrer.refart='" + dtmIdProd.getValueAt(i, 0) + "' group by t_article.refart order by t_article.design asc";
                String reqProdSor = "Select t_article.design,sum(t_sortie.QteSortie),sum(t_sortie.QteSortie * t_sortie.PrixUnitaire) from t_article,t_sortie where t_article.refart='" + dtmIdProd.getValueAt(i, 0) + "' and t_sortie.refart='" + dtmIdProd.getValueAt(i, 0) + "' group by t_article.refart order by t_article.design asc";
                st = new ConnectDataBase().getConnetion().createStatement();
                rs = st.executeQuery(reqProdEnt);
                while (rs.next()) {
                    row1[0] = rs.getObject(1);
                    row1[1] = rs.getObject(2);
                    row1[2] = rs.getObject(3);
                    dtm1.addRow(row1);
                }
                rs = st.executeQuery(reqProdSor);
                while (rs.next()) {
                    row2[0] = rs.getObject(1);
                    row2[1] = rs.getObject(2);
                    row2[2] = rs.getObject(3);
                    dtm2.addRow(row2);
                }
            }
            if(dtm1.getRowCount()>dtm2.getRowCount()){
                int NbLigneSup=(dtm1.getColumnCount()-dtm2.getRowCount())+1;
                for(int i=0;i<NbLigneSup;i++){
                    row2[0]="";
                    row2[1]="";
                    row2[2]="";
                    dtm2.addRow(row2);
                }
            }*/
    public void produitRentable() {
        try {
            //les produits entrées
            String produitSortie = "SELECT distinct refart FROM t_sortie";
            double comp = 0, nbcomp;
            String enteteIdProd[] = {"ID"};
            String entete1[] = {"Article", "Quantité totale entrée", "Prix total entrée"};
            String entete2[] = {"Article", "Quantité totale sortie", "Prix total sortie"};
            DefaultTableModel dtmIdProd = new DefaultTableModel(null, enteteIdProd);
            DefaultTableModel dtm1 = new DefaultTableModel(null, entete1);
            DefaultTableModel dtm2 = new DefaultTableModel(null, entete2);
            Object rowIdProd[] = new Object[1];
            Object row1[] = new Object[3];
            Object row2[] = new Object[3];
            st = new ConnectDataBase().getConnetion().createStatement();
            rs = st.executeQuery(produitSortie);
            while (rs.next()) {
                rowIdProd[0] = rs.getObject(1);
                dtmIdProd.addRow(rowIdProd);
            }
            for (int i = 0; i < dtmIdProd.getRowCount(); i++) {
                String sortieProduit = "Select t_article.design,sum(t_sortie.QteSortie),sum(t_sortie.QteSortie * t_sortie.PrixUnitaire) from t_article,t_sortie where t_article.refart='" + dtmIdProd.getValueAt(i, 0) + "' and t_sortie.refart='" + dtmIdProd.getValueAt(i, 0) + "' group by t_article.refart order by t_article.design asc";
                rs = st.executeQuery(sortieProduit);
                while (rs.next()) {
                    row1[0] = rs.getObject(1);
                    row1[1] = rs.getObject(2);
                    row1[2] = rs.getObject(3);
                    dtm1.addRow(row1);
                }
                String EntrerProduit = "Select t_article.design,sum(t_entrer.QteEntrer),sum(t_entrer.QteEntrer * t_entrer.PrixUnitaire) from t_article,t_entrer where t_article.refart='" + dtmIdProd.getValueAt(i, 0) + "' and t_entrer.refart='" + dtmIdProd.getValueAt(i, 0) + "' group by t_article.refart order by t_article.design asc";
                rs = st.executeQuery(EntrerProduit);
                while (rs.next()) {
                    row2[0] = rs.getObject(1);
                    row2[1] = rs.getObject(2);
                    row2[2] = rs.getObject(3);
                    dtm2.addRow(row2);
                }
            }
            for (int i = 0; i < dtm1.getRowCount(); i++) {
                //String a = dtm1.getValueAt(i, 0).toString();
                nbcomp = Double.parseDouble(dtm2.getValueAt(i, 2).toString()) - Double.parseDouble(dtm1.getValueAt(i, 2).toString());
                comp = Math.max(comp, nbcomp);
                //
                System.out.println(comp);
                if (comp > 0) {
                    labDes.setText("Désignation : " + dtm1.getValueAt(i, 0).toString());
                    labQteEnt.setText("Quantité entrée : " + dtm1.getValueAt(i, 1));
                    labQteSort.setText("Quantité sortie : " + dtm2.getValueAt(i, 1));
                    jLabel12.setText("Rentabilité : " + comp);
                } else if (comp <= 0.0) {
                    labDes.setText("Désignation : ");
                    labQteEnt.setText("Quantité entrée : ");
                    labQteSort.setText("Quantité sortie : ");
                    jLabel12.setText("Rentabilité : ");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erreur de recherche de produit\nle plus rentable\n" + ex, "JStore : ERREUR", JOptionPane.ERROR_MESSAGE);
        }
    }
    double gainProduitRentable;

    public void produitLePlusRentableOk() {
        try {
            String entete1[] = {"Article", "Quantité totale entrée", "Prix total entrée"};
            String entete2[] = {"Article", "Quantité totale sortie", "Prix total sortie"};
            double comp = 0, nbcomp;
            DefaultTableModel dtm1 = new DefaultTableModel(null, entete1);
            DefaultTableModel dtm2 = new DefaultTableModel(null, entete2);
            String reqEntrer = "Select t_article.design,sum(t_entrer.QteEntrer),sum(t_entrer.QteEntrer * t_entrer.PrixUnitaire) from t_article,t_entrer where t_article.refart=t_entrer.refart group by t_article.refart order by t_article.design asc";
            String reqSortie = "Select t_article.design,sum(t_sortie.QteSortie),sum(t_sortie.QteSortie * t_sortie.PrixUnitaire) from t_article,t_sortie where t_article.refart=t_sortie.refart group by t_article.refart order by t_article.design asc";
            Object row1[] = new Object[3];
            Object row2[] = new Object[3];
            st = new ConnectDataBase().getConnetion().createStatement();
            rs = st.executeQuery(reqEntrer);
            while (rs.next()) {
                row1[0] = rs.getObject(1);
                row1[1] = rs.getObject(2);
                row1[2] = rs.getObject(3);
                dtm1.addRow(row1);
            }
            rs = st.executeQuery(reqSortie);
            while (rs.next()) {
                row2[0] = rs.getObject(1);
                row2[1] = rs.getObject(2);
                row2[2] = rs.getObject(3);
                dtm2.addRow(row2);
            }
            for (int i = 0; i < dtm2.getRowCount(); i++) {
                //JOptionPane.showMessageDialog(null, dtm1.getValueAt(i, 0).toString()+"\n"+dtm2.getValueAt(i, 0).toString()+"\n"+comp);
                if (dtm2.getValueAt(i, 0).toString().equals(dtm1.getValueAt(i, 0).toString())) {
                    String a = dtm2.getValueAt(i, 0).toString();
                    nbcomp = Double.parseDouble(dtm2.getValueAt(i, 2).toString()) - Double.parseDouble(dtm1.getValueAt(i, 2).toString());
                    comp = Math.max(comp, nbcomp);
                    //
                    //gainProduitRentable=comp;

                    /*if (comp > 0) {
                        labDes.setText("Désignation : " + dtm1.getValueAt(i, 0).toString());
                        labQteEnt.setText("Quantité entrée : " + dtm1.getValueAt(i, 1));
                        labQteSort.setText("Quantité sortie : " + dtm2.getValueAt(i, 1));
                        jLabel12.setText("Rentabilité : " + comp);
                    } else if (comp <= 0.0) {
                        labDes.setText("Désignation : ");
                        labQteEnt.setText("Quantité entrée : ");
                        labQteSort.setText("Quantité sortie : ");
                        jLabel12.setText("Rentabilité : ");
                    }*/
                }
            }
            if (comp > 0) {
                for (int i = 0; i < dtm2.getRowCount(); i++) {
                    if ((Double.parseDouble(dtm2.getValueAt(i, 2).toString()) - Double.parseDouble(dtm1.getValueAt(i, 2).toString())) == comp) {
                        labDes.setText("Désignation : " + dtm1.getValueAt(i, 0).toString());
                        labQteEnt.setText("Quantité entrée : " + dtm1.getValueAt(i, 1));
                        labQteSort.setText("Quantité sortie : " + dtm2.getValueAt(i, 1));
                        jLabel12.setText("Rentabilité : " + comp);
                    }
                }
            } else if (comp <= 0.0) {
                labDes.setText("Désignation : ");
                labQteEnt.setText("Quantité entrée : ");
                labQteSort.setText("Quantité sortie : ");
                jLabel12.setText("Rentabilité : ");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erreur de recherche de produit\nle plus rentable\n" + ex, "JStore : ERREUR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void produitLePlusRentable() {
        String entete[] = {"Article", "Quantité entrée", "Quantité sortie", "Rentabilité"};
        dtm = new DefaultTableModel(null, entete);
        try {
            String produitSortie = "SELECT distinct refart FROM t_sortie";
            double comp = 0, nbcomp;
            String enteteIdProd[] = {"ID"};
            String entete1[] = {"Article", "Quantité totale entrée", "Prix total entrée"};
            String entete2[] = {"Article", "Quantité totale sortie", "Prix total sortie"};
            DefaultTableModel dtmIdProd = new DefaultTableModel(null, enteteIdProd);
            DefaultTableModel dtm1 = new DefaultTableModel(null, entete1);
            DefaultTableModel dtm2 = new DefaultTableModel(null, entete2);
            Object rowIdProd[] = new Object[1];
            Object row1[] = new Object[3];
            Object row2[] = new Object[3];
            st = new ConnectDataBase().getConnetion().createStatement();
            rs = st.executeQuery(produitSortie);
            while (rs.next()) {
                rowIdProd[0] = rs.getObject(1);
                dtmIdProd.addRow(rowIdProd);
            }
            for (int z = 0; z < dtmIdProd.getRowCount(); z++) {
                String req = "Select t_article.design,sum(t_entrer.QteEntrer),sum(t_sortie.QteSortie),sum((t_sortie.PrixUnitaire * t_sortie.QteSortie))-sum(t_entrer.QteEntrer)*(t_entrer.PrixUnitaire) from t_article,t_entrer,t_sortie where t_article.refart='" + dtmIdProd.getValueAt(z, 0) + "' and t_entrer.refart='" + dtmIdProd.getValueAt(z, 0) + "' and t_entrer.refart='" + dtmIdProd.getValueAt(z, 0) + "' and t_sortie.refart='" + dtmIdProd.getValueAt(z, 0) + "' group by t_sortie.refart";
                Object row[] = new Object[6];
                st = new ConnectDataBase().getConnetion().createStatement();
                rs = st.executeQuery(req);
                while (rs.next()) {
                    row[0] = rs.getObject(1);
                    row[1] = rs.getObject(2);
                    row[2] = rs.getObject(3);
                    row[3] = rs.getObject(4);
                    dtm.addRow(row);
                }
                //Recherche de produit le plus rentable
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    nombreComp = Double.parseDouble(dtm.getValueAt(i, 3).toString());
                    resComp = Math.max(resComp, nombreComp);
                    //JOptionPane.showMessageDialog(null, resComp);
                    if (resComp == Double.parseDouble(dtm.getValueAt(i, 3).toString())) {
                        labDes.setText("Désignation : " + dtm.getValueAt(i, 0).toString());
                        labQteEnt.setText("Quantité entrée : " + dtm.getValueAt(i, 1));
                        labQteSort.setText("Quantité sortie : " + dtm.getValueAt(i, 2));
                        jLabel12.setText("Rentabilité : " + dtm.getValueAt(i, 3));
                    } else if (resComp == 0.0) {
                        labDes.setText("Désignation : ");
                        labQteEnt.setText("Quantité entrée : ");
                        labQteSort.setText("Quantité sortie : ");
                        jLabel12.setText("Rentabilité : ");
                    }
                    System.out.println(resComp + " " + dtmIdProd.getValueAt(z, 0) + " " + dtm.getValueAt(i, 3).toString());

                }
            }
        } catch (Exception ex) {
            System.out.print(ex.getMessage());
        }
    }

    double resComp, a;
    double nombreComp;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabDate;
    private javax.swing.JLabel LabRes;
    private javax.swing.JLabel LabTent;
    private javax.swing.JLabel LabTsor;
    private picturepanel.ImagePanel imagePanel3;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    public javax.swing.JMenu jMenu4;
    public javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem4;
    public javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel labDes;
    private javax.swing.JLabel labQteEnt;
    private javax.swing.JLabel labQteSort;
    public javax.swing.JLabel labus;
    // End of variables declaration//GEN-END:variables
}
